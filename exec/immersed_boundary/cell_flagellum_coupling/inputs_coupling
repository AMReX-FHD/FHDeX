

  # Problem specification
  prob_lo = 0.0   0.0   0.0        # physical lo coordinate
  prob_hi = 4.e-3 2.e-3 2.e-3      # physical hi coordinate

  # if prob_type = 0, zero initial velocity
  # if prob_type = 1, vortex
  # if prob_type = 2, KH - sine
  # if prob_type = 3, KH - smooth
  prob_type = 0

  # number of cells in domain
  n_cells       = 128 64 64
  # max number of cells in a box
  max_grid_size = 16 16 16
  max_particle_tile_size = 0 0 0 # set to zero to use max_grid_size, setting a very large number will also use max grid size, but will also ensure that refined es and particle grids will do the same.

  # Time-step control
  fixed_dt = 1e-4

  # Controls for number of steps between actions
  max_step = 5000
  plot_int = 200

  # Viscous friction L phi operator
  # if abs(visc_type) = 1, L = div beta grad
  # if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  # if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  # positive = assume constant coefficients
  # negative = assume spatially-varying coefficients
  visc_coef = 1e-2
  visc_type = 1

  # Stochastic parameters
  variance_coef_mom    = 0.
  initial_variance_mom = 0.
  k_B       = 1.38064852e-16 # [units: cm2*g*s-2*K-1]
  T_init = 295.00         # [units: K]

  # struct_fact_int = 100
  # n_steps_skip    = 50000
  struct_fact_int = 0
  n_steps_skip    = 0

  # Boundary conditions
  # ----------------------
  # BC specifications:
  # -1 = periodic, 1 = finite slip wall 2 = no-slip wall, -2 = periodic pressure
  bc_vel_lo =  -1  2  2
  bc_vel_hi =  -1  2  2

  p_lo  = 0 -.1  0
  p_hi  = 0  .1  0



  mg_verbose = 0                  # multigrid verbosity

  # Staggered multigrid solver parameters
  stag_mg_verbosity = 0           # verbosity
  stag_mg_max_vcycles = 1         # max number of v-cycles
  stag_mg_minwidth = 2            # length of box at coarsest multigrid level
  stag_mg_bottom_solver = 0       # bottom solver type
                                  # 0 = smooths only, controlled by mg_nsmooths_bottom
                                  # 4 = Fancy bottom solve that coarsens additionally
                                  #     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2       # number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2         # number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 10    # number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 # for stag_mg_bottom_solver 4, number of additional levels of multigrid
  stag_mg_omega = 1.e0            # weighted-jacobi omega coefficient
  stag_mg_smoother = 1            # 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.e-12        # relative tolerance stopping criteria


  # GMRES solver parameters
  gmres_rel_tol = 1.e-12          # relative tolerance stopping criteria
  gmres_abs_tol = 1.e-14          # absolute tolerance stopping criteria
  gmres_verbose = 1               # gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20            # max number of outer iterations
  gmres_max_inner = 20            # max number of inner iterations, or restart number
  gmres_max_iter = 400            # max number of gmres iterations
  gmres_min_iter = 1              # min number of gmres iterations


  #Peskin kernel (Currently 3, 4, & 6 implemented) (keep these the same for now)
  #--------
  pkernel_fluid = 4

  #cell body particle initialization
  # 1 = use particles.dat file, 2 = spread randomly over domain
  particle_placement = 1
  # -1 = calculate based on n0
  particle_count = 8
  # real particles per simulator particle
  particle_neff = 1
  # ignore if particle_count is positive
  particle_n0 = 3.011e20 # 0.5M
  # number of groups (polymer groups)
  ngroups = 1
  # number of bonds (be careful about whether there are repeated bonds)
  nbonds = 28

  k = 1.0e-3
  x0 = 8.0e-8


  # Flagellar markers

&immbdy

  n_immbdy = 1

  contains_flagellum = true
  contains_fourier   = true


&ib_flagellum

  n_marker  = 21
  offset_0(:, 1) = 1.5e-3 1.e-3 1.e-3	# probably use this to place the cell body as well

  amplitude  = 1e4
  frequency  = 1
  length     = 1.6e-3
  wavelength = .8e-3
  k_spring   = 1e-3
  k_driving  = 1e-3


  fourier_coef_len = 4
  chlamy_flagellum_datafile = "inputs_chlamy_data"
