&common

  ! Problem specification
  prob_lo(1:2) = 0.      0.        ! physical lo coordinate
  prob_hi(1:2) = 0.96d-5 0.96d-5   ! physical hi coordinate

  cell_depth = 0.5d-7

  ! refer to init_funcs.F90
  prob_type = 2
  
  ! number of cells in domain
  n_cells(1:2) = 192 192
  ! max number of cells in a box
  max_grid_size(1:2) = 96 96

  ! Time-step control
  fixed_dt = 2.e-13

  ! Controls for number of steps between actions
  max_step = 10000
  plot_int= 100

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_coef = 2.7d0	! [units: g*cm-1*s-1] dynamic (shear) viscosity of water
  visc_type = 1
  
  ! Stochastic parameters
  seed = 1
  variance_coef_mom = 1.
  variance_coef_mass = 1.
  initial_variance_mom = 0.

  k_B = 1.3806488d-16   ! Boltzmann's constant [units: cm2*g*s-2*K-1]
  T_init(1) = 300. 	! [units: K]

  algorithm_type = 6

  struct_fact_int = -1
  n_steps_skip = 0

  ! Boundary conditions
  ! ----------------------
  ! BC specifications:
  ! -1 = periodic
  !  1 = slip
  !  2 = no-slip
  bc_vel_lo(1:2) = -1 2
  bc_vel_hi(1:2) = -1 2

  ! -1 = periodic
  !  1 = wall
  !  2 = reservoir (Dirichlet values must be suppled by other means)
  bc_mass_lo(1:2) = -1 1
  bc_mass_hi(1:2) = -1 1

  ! -1 = periodic
  !  1 = Dirichlet
  !  2 = Neumann
  bc_es_lo(1:2) = -1 1
  bc_es_hi(1:2) = -1 1

  potential_lo(1:2) = 0. -128.d0
  potential_hi(1:2) = 0.  128.d0

  ! Thermodynamic and transport properties:
  !----------------------
  nspecies = 2
  molmass(1:3) = 2.4d-22 2.4d-22  ! molecular masses for nspecies (mass per molecule, *not* molar mass)
  rhobar(1:3) = 1.38d0 1.38d0     ! pure component densities for all species
  rho0 = 1.38d0

/

&multispec

  ! initial values for c
  c_init_1(1:2) = 0.5 0.5
  c_init_2(1:2) = 0.5 0.5

  ! These are lower-triangules of symmetric matrices represented as vectors
  ! Number of elements is (nspecies*(nspecies-1)/2)
  ! The values are red row by row starting from top going down
  ! (this allows easy addition/deletion of new species/rows)
  ! So D_12; D_13, D_23; D_14, D_24, D_34; ...
  Dbar(1) = 5.d-8 ! Maxwell-Stefan diffusion constant  

  use_charged_fluid = 1
  dielectric_const = 9.2d-20
  charge_per_mass(1:3) = 6.8d2 -6.8d2

  use_multiphase = 1
  alpha_gex = 4000.
  n_gex = 2
  kc_tension = 1.d-11

/

&gmres

  mg_verbose = 0                  ! multigrid verbosity

  ! Staggered multigrid solver parameters
  stag_mg_verbosity = 0          ! verbosity
  stag_mg_max_vcycles = 1         ! max number of v-cycles
  stag_mg_minwidth = 2            ! length of box at coarsest multigrid level
  stag_mg_bottom_solver = 0       ! bottom solver type
  ! 0 = smooths only, controlled by mg_nsmooths_bottom
  ! 4 = Fancy bottom solve that coarsens additionally
  !     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2  ! number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2    ! number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8     ! number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 ! for stag_mg_bottom_solver=4, number of additional levels of multigrid
  stag_mg_omega = 1.d0            ! weighted-jacobi omega coefficient
  stag_mg_smoother = 1            ! 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.d-9         ! relative tolerance stopping criteria


  ! GMRES solver parameters
  gmres_rel_tol = 1.e-12                ! relative tolerance stopping criteria
  gmres_abs_tol = 0                     ! absolute tolerance stopping criteria
  gmres_verbose = 1                     ! gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20                  ! max number of outer iterations
  gmres_max_inner = 5                   ! max number of inner iterations, or restart number
  gmres_max_iter = 100                  ! max number of gmres iterations
  gmres_min_iter = 1                    ! min number of gmres iterations

/
