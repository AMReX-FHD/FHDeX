&common

  ! Problem specification
  prob_lo(1:2) = 0.0 0.0    ! physical lo coordinate
  prob_hi(1:2) = 1.251e-6 1.252e-8     ! physical hi coordinate
  n_cells(1:2) = 40 1       ! number of cells in domain
  max_grid_size(1:2) = 10 1  ! max number of cells in a box

  ! Time-step control
  fixed_dt = 1.
  cfl = 0.5

  cell_depth = 1.252e-8

  ! Controls for number of steps between actions
  max_step = 40000000
  plot_int = 200000
  plot_base_name = "plt"
  chk_int = 0
  chk_base_name = "chk"
  prob_type = 1
  restart = -1
  print_int = 0
  project_eos_int = -1

  ! Physical parameters
  grav(1:2) = 0. 0.
  nspecies = 2
  molmass(1:2) = 1. 1.
  rhobar(1:2) = 1. 1.
  rho0 = 1.

  ! stochastic forcing amplitudes (1 for physical values, 0 to run them off)
  variance_coef_mom = 1.
  variance_coef_mass = 1.
  k_B = 1.
  Runiv = 8.314462175d7

  ! Algorithm control / selection
  algorithm_type = 0
  advection_type = 0
  barodiffusion_type = 0
  use_bl_rng = 0
  seed = 1

  ! Random number seeds for each physical process for use_bl_rng=T
  ! for positive value, the value is assigned as seed value
  ! for 0, a positive value is randomly chosen
  ! if -1 (only for restart), RNGs status is restored from checkpoint data
  seed_momentum = 1
  seed_diffusion = 1
  seed_reaction = 1
  seed_init_mass = 1
  seed_init_momentum = 1

  ! Viscous friction L phi operator
  ! if abs(visc_type) = 1, L = div beta grad
  ! if abs(visc_type) = 2, L = div [ beta (grad + grad^T) ]
  ! if abs(visc_type) = 3, L = div [ beta (grad + grad^T) + I (gamma - (2/3)*beta) div ]
  ! positive = assume constant coefficients
  ! negative = assume spatially-varying coefficients
  visc_coef = 1.
  visc_type = 2

  ! Stochastic momentum flux controls:
  filtering_width = 0
  stoch_stress_form = 1

  ! Initial conditions
  u_init(1:2) = 0. 0.
  perturb_width = 0.
  smoothing_width = 1.
  initial_variance_mom = 0.
  initial_variance_mass = 0.

  ! Boundary conditions
  ! ----------------------
  ! BC specifications:
  ! -1 = periodic
  ! 100 = no-slip wall      (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 101 = no-slip reservoir (Dir condition for normal vel; Dir velocity condition for trans vel)
  ! 200 = slip wall         (Dir condition for normal vel; Dir traction condition for trans vel)
  ! 201 = slip reservoir    (Dir condition for normal vel; Dir traction condition for trans vel)
  ! For a complete list see ???
  bc_vel_lo(1:2) = -1 -1
  bc_vel_hi(1:2) = -1 -1

  ! Each no-slip wall may be moving with a specified tangential 
  ! velocity along the tangential directions
  ! In 2D:
  ! wallspeed_lo/hi_x - yvel
  ! wallspeed_lo/hi_y - xvel
  ! In 3D:
  ! wallspeed_lo/hi_x - yvel,zvel
  ! wallspeed_lo/hi_y - xvel,zvel
  ! wallspeed_lo/hi_z - xvel,yvel
  wallspeed_lo(1,1:2) = 0. 0.
  wallspeed_hi(1,1:2) = 0. 0.

  ! These are mostly used for reaction-diffusion: 
  histogram_unit = 0
  density_weights(1:2) = 0. 0.
  shift_cc_to_boundary(1,1:2) = 0 0
  shift_cc_to_boundary(2,1:2) = 0 0

/

  # preconditioner type
  # 1 = projection preconditioner
  #-1 = projection preconditioner with expensive pressure update
  # 2 = lower triangular preconditioner
  #-2 = lower triangular preconditioner with negative sign
  # 3 = upper triangular preconditioner
  #-3 = upper triangular preconditioner with negative sign
  # 4 = Block diagonal preconditioner
  #-4 = Block diagonal preconditioner with negative sign
  precon_type = 1

  # use the viscosity-based BFBt Schur complement (from Georg Stadler)
  visc_schur_approx = 0

  # weighting of pressure when computing norms and inner products
  p_norm_weight = 1.e0

  # scale theta_alpha, beta, gamma, and b_u by this, and then scale x_p by the inverse
  scale_factor = 1.e0

  # MAC projection solver parameters:
  mg_verbose = 0            # multigrid verbosity
  cg_verbose = 0            # BiCGStab (mg_bottom_solver=1) verbosity
  mg_max_vcycles = 1        # maximum number of V-cycles
  mg_minwidth = 2           # length of box at coarsest multigrid level
  mg_bottom_solver = 0      # bottom solver type
  # 0 = smooths only, controlled by mg_nsmooths_bottom
  # 1 = BiCGStab
  # 4 = Fancy bottom solve that coarsens down additionally
  #     and then applies mg_nsmooths_bottom smooths
  mg_nsmooths_down = 2         # number of smooths at each level on the way down
  mg_nsmooths_up = 2           # number of smooths at each level on the way up
  mg_nsmooths_bottom = 8       # number of smooths at the bottom (only if mg_bottom_solver=0)
  mg_max_bottom_nlevels = 10   # for mg_bottom_solver 4, number of additional levels of multigrid
  mg_rel_tol = 1.e-9           # rel_tol for Poisson solve
  mg_abs_tol = 1.e-14          # abs_tol for Poisson solve

  # Staggered multigrid solver parameters
  stag_mg_verbosity = 0           # verbosity
  stag_mg_max_vcycles = 1         # max number of v-cycles
  stag_mg_minwidth = 2            # length of box at coarsest multigrid level
  stag_mg_bottom_solver = 4       # bottom solver type
  # 0 = smooths only, controlled by mg_nsmooths_bottom
  # 4 = Fancy bottom solve that coarsens additionally
  #     and then applies stag_mg_nsmooths_bottom smooths
  stag_mg_nsmooths_down = 2       # number of smooths at each level on the way down
  stag_mg_nsmooths_up = 2         # number of smooths at each level on the way up
  stag_mg_nsmooths_bottom = 8     # number of smooths at the bottom
  stag_mg_max_bottom_nlevels = 10 # for stag_mg_bottom_solver 4, number of additional levels of multigrid
  stag_mg_omega = 1.e0            # weighted-jacobi omega coefficient
  stag_mg_smoother = 1            # 0 = jacobi; 1 = 2*dm-color Gauss-Seidel
  stag_mg_rel_tol = 1.e-9         # relative tolerance stopping criteria

  # GMRES solver parameters
  gmres_rel_tol = 1.e-9     # relative tolerance stopping criteria
  gmres_abs_tol = 0.e0      # absolute tolerance stopping criteria
  gmres_verbose = 1         # gmres verbosity; if greater than 1, more residuals will be printed out
  gmres_max_outer = 20      # max number of outer iterations
  gmres_max_inner = 5       # max number of inner iterations, or restart number
  gmres_max_iter = 100      # max number of gmres iterations
  gmres_min_iter = 1        # min number of gmres iterations

  gmres_spatial_order = 2   # spatial order of viscous and gradient operators in matrix "A"

